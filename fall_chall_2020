import sys
import math
from random import random, choice

# Auto-generated code below aims at helping you parse
# the standard input according to the problem statement.
def debug(*args, **kwargs):
    print(*args, **kwargs, file = sys.stderr)

class Player:
    def __init__(self):
        self.inv_0 = [3, 0, 0, 0]

    def inventaire(self, action_id, inv_0, inv_1, inv_2, inv3, score):
        self.action_id = action_id
        self.inv_0 = [1, 0, 0, 0]
        self.inv_1 = [0, 1, 0, 0]
        self.inv_2 = [0, 0, 1, 0]
        self.inv_3 = [0, 0, 0, 1]
        self.score = score

    def liste_sorts(self, list):
        self.list = [
            [-1, 0, -2, 0],
            [-1, -1, 1, 0],
            [-3, 0, -1, 1],
            [-1, -3, 0, 2],
        ]
  

class Action:
    def __init__(self, action_id, action_type, delta_0, delta_1, delta_2, delta_3, price, tome_index, tax_count, castable):
        self.action_id = action_id
        self.action_type = action_type
        self.delta_0 = delta_0
        self.delta_1 = delta_1
        self.delta_2 = delta_2
        self.delta_3 = delta_3
        self.price = price
        self.tome_index = tome_index
        self.tax_count = tax_count
        self.castable = castable

    def action_possible(actions):
        best_price = 23
        action_valide = []
        for action in actions:
            if action_type == "CAST" and castable == True and price < best_price:
                action_valide.append(action)
            else:
                action_valide.append(action)
        return action_valide

    def choix_action(action_valide):
        if action_type == "BREW":
            print("BREW", action_id)
        elif action_type == "CAST" and inv_3 < delta_3_max:
            print("CAST", action_id)
        elif action_type == "CAST" and inv_2 < delta_2_max:
            print("CAST", action_id)
        elif action_type == "CAST" and inv_1 < delta_1_max:
            print("CAST", action_id)
        elif action_type == "CAST" and inv_0 < delta_0_max:
            print("CAST", action_id)

    def choix_sort(self, action_id, action_type, delta):
        self.action_id = {78, 79, 80, 81}
        self.action_type = {"CAST", "BREW", "REST", "WAIT"}
        self.delta = {}

    def lancer_sort(self, action_id, castable: bool):
        self.action_id = action_id
        self.castable = castable
        if action_type == "CAST" and castable == True:
            sort = random.choice(Player.liste_sorts)
        return sort

    def recuperer(self):
        self.action_type == "REST"

class Preparer(Action):
    def __init__(self, action_id, action_type, delta_0, delta_1,price):
        super().__init__(self, action_id, action_type, delta_0, delta_1)
        self.price = price

    def select_potion(self, action_id, list):
        self.action_id = action_id
        self.list = []

    def transformer(self, item_1, item_2, potion):
        self.item_1 = item_1
        self.item_2 = item_2
        self.potion = potion
        if price > best_price:
            price = best_price
        # else:
        #     self.item_1 = min(Player.liste_sorts[:4][:4])
        #     self.item_2 = max(Player.liste_sorts(ma_liste[:4][:4])
        #     self.potion = sum(item_1 + item_2)

# game loop
witch = Player()
while True:
    witch = Player()
    action_count = int(input())  # the number of spells and recipes in play
    best_price = 0
    for i in range(action_count):
        # action_id: the unique ID of this spell or recipe
        # action_type: in the first league: BREW; later: CAST, OPPONENT_CAST, LEARN, BREW
        # delta_0: tier-0 ingredient change
        # delta_1: tier-1 ingredient change
        # delta_2: tier-2 ingredient change
        # delta_3: tier-3 ingredient change
        # price: the price in rupees if this is a potion
        # tome_index: in the first two leagues: always 0; later: the index in the tome if this is a tome spell, equal to the read-ahead tax
        # tax_count: in the first two leagues: always 0; later: the amount of taxed tier-0 ingredients you gain from learning this spell
        # castable: in the first league: always 0; later: 1 if this is a castable player spell
        # repeatable: for the first two leagues: always 0; later: 1 if this is a repeatable player spell
        action_id, action_type, delta_0, delta_1, delta_2, delta_3, price, tome_index, tax_count, castable, repeatable = input().split()
        action_id = int(action_id)
        delta_0 = int(delta_0)
        delta_1 = int(delta_1)
        delta_2 = int(delta_2)
        delta_3 = int(delta_3)
        price = int(price)
        tome_index = int(tome_index)
        tax_count = int(tax_count)
        castable = castable != "0"
        repeatable = repeatable != "0"


        if price > best_price:
            best_price = price
        

        if action_type == "CAST":
            action_id = [78, 79, 80, 81]
            delta_0 = [2, 0, 0, 0]

    for i in range(2):
        # inv_0: tier-0 ingredients in inventory
        # score: amount of rupees
        inv_0, inv_1, inv_2, inv_3, score = [int(j) for j in input().split()]

    # Write an action using print
    # To debug: print("Debug messages...", file=sys.stderr, flush=True)


    # in the first league: BREW <id> | WAIT; later: BREW <id> | CAST <id> [<times>] | LEARN <id> | REST | WAIT
    print("CAST", action_id)
